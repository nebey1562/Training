CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    City VARCHAR(50) NOT NULL DEFAULT 'Unknown',
    SignupDate DATE NOT NULL,
    CHECK (Email LIKE '%@%.%')
);


CREATE TABLE Products (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    ProductName VARCHAR(100) NOT NULL,
    Category VARCHAR(50) NOT NULL DEFAULT 'Miscellaneous',
    Price DECIMAL(10,2) NOT NULL CHECK (Price >= 0)
);


CREATE TABLE Orders (
    OrderID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    OrderDate DATE NOT NULL DEFAULT (CURDATE()),
    TotalAmount DECIMAL(10,2) NOT NULL CHECK (TotalAmount >= 0),
    CONSTRAINT fk_orders_customer FOREIGN KEY (CustomerID) 
        REFERENCES Customers(CustomerID) ON DELETE SET NULL
);


CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    ProductID INT,
    Quantity INT NOT NULL CHECK (Quantity > 0),
    Price DECIMAL(10,2) NOT NULL CHECK (Price >= 0),
    CONSTRAINT fk_orderdetails_order FOREIGN KEY (OrderID) 
        REFERENCES Orders(OrderID) ON DELETE SET NULL,
    CONSTRAINT fk_orderdetails_product FOREIGN KEY (ProductID) 
        REFERENCES Products(ProductID) ON DELETE SET NULL
);

CREATE TABLE Enrollments (
    EnrollmentID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    EnrollmentDate DATE NOT NULL DEFAULT (CURDATE()),
    Status ENUM('Active', 'Inactive', 'Pending') NOT NULL DEFAULT 'Pending',
    CONSTRAINT fk_enrollments_customer FOREIGN KEY (CustomerID) 
        REFERENCES Customers(CustomerID) ON DELETE SET NULL
);

CREATE INDEX idx_customer_email ON Customers(Email);
CREATE INDEX idx_customer_city ON Customers(City);
CREATE INDEX idx_product_category ON Products(Category);
CREATE INDEX idx_order_customer ON Orders(CustomerID);
CREATE INDEX idx_order_date ON Orders(OrderDate);
CREATE INDEX idx_orderdetails_order ON OrderDetails(OrderID);
CREATE INDEX idx_orderdetails_product ON OrderDetails(ProductID);
CREATE INDEX idx_enrollment_customer ON Enrollments(CustomerID);
CREATE INDEX idx_enrollment_date ON Enrollments(EnrollmentDate);

INSERT INTO Customers (CustomerID, Name, Email, City, SignupDate) VALUES
(1, 'Amit Sharma', 'amit.sharma@example.com', 'Mumbai', '2024-11-01'),
(2, 'Priyanka Nair', 'priyanka.nair@example.com', 'Bangalore', '2025-02-15'),
(3, 'Kunal Gupta', 'kunal.gupta@example.com', 'Delhi', '2024-08-20'),
(4, 'Riya Sen', 'riya.sen@example.com', 'Kolkata', '2023-06-10'),
(5, 'Vikas Patel', 'vikas.patel@example.com', 'Ahmedabad', '2025-04-05');

INSERT INTO Products (ProductID, ProductName, Category, Price) VALUES
(1, 'Gaming Laptop', 'Electronics', 110000.00),
(2, 'Smartwatch', 'Electronics', 25000.00),
(3, 'Study Desk', 'Furniture', 20000.00),
(4, 'Recliner', 'Furniture', 12000.00),
(5, 'Fountain Pen', 'Stationery', 15.00),
(6, 'Notebook Set', 'Stationery', 80.00);

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
(1, 1, '2025-05-01', 110000.00),
(2, 2, '2025-06-05', 45000.00),
(3, 3, '2025-06-15', 20000.00),
(4, 4, '2025-05-25', 15015.00),
(5, 5, '2025-04-20', 15.00);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity, Price) VALUES
(1, 1, 1, 1, 110000.00),
(2, 2, 2, 1, 25000.00),
(3, 2, 3, 1, 20000.00),
(4, 3, 4, 1, 12000.00),
(5, 4, 5, 1, 15.00),
(6, 5, 5, 1, 15.00);

INSERT INTO Enrollments (CustomerID, EnrollmentDate, Status) VALUES
(1, '2024-11-02', 'Active'),
(2, '2025-02-16', 'Pending'),
(3, '2024-08-21', 'Active'),
(4, '2023-06-11', 'Inactive'),
(5, '2025-04-06', 'Pending');

SELECT CustomerID, Name, Email, City, SignupDate FROM Customers;
SELECT OrderID, CustomerID, OrderDate, TotalAmount 
FROM Orders 
WHERE OrderDate >= CURDATE() - INTERVAL 30 DAY;
SELECT ProductName, Price FROM Products;
SELECT Category, COUNT(ProductID) AS ProductCount 
FROM Products 
GROUP BY Category;

SELECT CustomerID, Name, Email, City, SignupDate 
FROM Customers 
WHERE City = 'Bangalore';
SELECT OrderID, CustomerID, OrderDate, TotalAmount 
FROM Orders 
WHERE TotalAmount > 5000;
SELECT CustomerID, Name, Email, City, SignupDate 
FROM Customers 
WHERE SignupDate >= '2024-01-01';

SELECT O.OrderID, O.CustomerID, O.OrderDate, O.TotalAmount, C.Name AS CustomerName 
FROM Orders O 
LEFT JOIN Customers C ON O.CustomerID = C.CustomerID;
SELECT OD.OrderID, P.ProductName 
FROM OrderDetails OD 
JOIN Products P ON OD.ProductID = P.ProductID;
SELECT C.Name 
FROM Customers C 
LEFT JOIN Orders O ON C.CustomerID = O.CustomerID 
WHERE O.OrderID IS NULL;

SELECT C.CustomerID, C.Name, SUM(O.TotalAmount) AS TotalSpent 
FROM Orders O 
JOIN Customers C ON O.CustomerID = C.CustomerID 
GROUP BY C.CustomerID, C.Name;
SELECT P.ProductName, SUM(OD.Quantity) AS TotalQuantity 
FROM OrderDetails OD 
JOIN Products P ON P.ProductID = OD.ProductID 
GROUP BY P.ProductID, P.ProductName 
ORDER BY TotalQuantity DESC 
LIMIT 1;
SELECT C.Name, AVG(O.TotalAmount) AS AvgOrderValue 
FROM Orders O 
JOIN Customers C ON O.CustomerID = C.CustomerID 
GROUP BY C.CustomerID, C.Name;
SELECT P.Category, SUM(OD.Price * OD.Quantity) AS TotalSales 
FROM OrderDetails OD 
JOIN Products P ON OD.ProductID = P.ProductID 
GROUP BY P.Category;

SELECT C.CCustomerID, C.Name 
FROM Customers C 
JOIN Orders O ON C.CustomerID = O.CustomerID 
GROUP BY C.CustomerID, C.Name 
HAVING SUM(O.TotalAmount) > (SELECT AVG(TotalAmount) FROM Orders);
SELECT P.ProductID, P.ProductName 
FROM Products P 
LEFT JOIN OrderDetails O ON P.ProductID = O.ProductID 
WHERE O.ProductID IS NULL;
SELECT O.CustomerID, O.OrderDate 
FROM Orders O 
WHERE O.OrderDate = (
    SELECT MAX(OrderDate) 
    FROM Orders O2 
    WHERE O2.CustomerID = O.CustomerID
);

SELECT C.CustomerID, C.Name, SUM(O.TotalAmount) AS TotalSpent 
FROM Customers C 
JOIN Orders O ON C.CustomerID = O.CustomerID 
GROUP BY C.CustomerID, C.Name 
ORDER BY TotalSpent DESC;
SELECT C.CustomerID, C.Name, COUNT(O.OrderID) AS NumOrders 
FROM Customers C 
JOIN Orders O ON C.CustomerID = O.CustomerID 
GROUP BY C.CustomerID, C.Name 
ORDER BY NumOrders DESC, C.Name ASC 
LIMIT 3;
SELECT P.ProductID, P.ProductName, COUNT(DISTINCT O.CustomerID) AS UniqueCustomers 
FROM OrderDetails OD 
JOIN Orders O ON OD.OrderID = O.OrderID 
JOIN Products P ON OD.ProductID = P.ProductID 
GROUP BY P.ProductID, P.ProductName;